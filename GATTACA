#!/usr/bin/env bash

echo # This random echo is to give a bit more space to the help commands.

function _gattaca_print_general_help {
    echo "Usage: GATTACA [-h | --help] [-v | --version <version>] [ -l | --log_name <name> ]"
    echo "       <command> [<args>]"
    echo
    echo "Options:"
    echo "    -v | --version <version>      Specify the version of the docker to run <command> in."
    echo "    -l | --log_name <name>        Specify the filename of the log, created alongside the"
    echo "                                  output of many commands."
    echo "    --verbose                     Passing this flag includes debug information in the"
    echo "                                  logfiles."
    echo
    echo "Available commands:"
    echo "    init              Create a configuration file for 'GATTACA run'."
    echo "    run               Perform a differential expression analysis."
    echo "    prepaffy          Create an expression matrix from Affymetrix .CEL files."
    echo "    prepagil          Create an expression matrix from Agilent .txt files."
    echo "    annotate          Annotate an expression file with remote annotations."
    echo
    echo "Use '-h' or '--help' in any subcommand to get additional help and possible options"
}


function _gattaca_help_init {
    echo "Usage: GATTACA init [-h | --help] <file_path>"
    echo
    echo "Create a configuration file for 'GATTACA run' at <file_path>."
    echo "Note: This command does not produce a log file."
}


function _gattaca_help_run {
    echo "Usage: GATTACA run [-h | --help] <output_dir> <input_file> <options_file>"
    echo
    echo "Perform differential gene analysis on an expression dataset '<input_file>', saving"
    echo "the output plots and files in '<output_dir>'. The runtime options for this command are"
    echo "specified in the <options_file>, encoded in yaml. See the 'init' command and the"
    echo "GATTACA repository README for more information about a specific container version."
    echo
    echo "NOTE: The options file will be copied in the same folder as the input file, due"
    echo "to (self-imposed) limitations in the docker engine."
}


function _gattaca_help_prepaffy {
    echo "Usage: GATTACA prepaffy [-h | --help] [-r | --remove-controls] <input_dir> <output_file>"
    echo
    echo "Run preprocessing on all .CEL files present in <input_dir> to get an expression matrix,"
    echo "saved as <output_file>."
    echo
    echo "Options:"
    echo "  -r | --remove-controls      If set, will remove control probes from the final"
    echo "                              expression set."
}


function _gattaca_help_annotate {
    echo "Usage: GATTACA annotate [-h | --help] [-s | --select <selections>] <input_file>"
    echo "       <output_file> <chip_id>"
    echo
    echo "Annotate an expression dataset '<input_file>' with annotations for the chip <chip_id>."
    echo "Save the output in <output_file>."
    echo "Read the README for a list of the supported chips for each container version."
    echo 
    echo "Options:"
    echo "  -s | --select <selections>         Comma delimited list of selections. Defaults to"
    echo "                                     'SYMBOL,GENENAME', annotating HUGO symbols and long"
    echo "                                     gene names."
}


function _gattaca_help_prepagil {
    echo "Usage: GATTACA prepagil [-h | --help] [-r | --remove-controls] [-p | --grep-pattern <pattern>]"
    echo "       [-g | --green-only] <input_dir> <output_file> <analysis_program>"
    echo
    echo "This command prepares normalized, log2 transformed expression matrices from agilent files."
    echo "Runs on all files in <input_dir> that end in a '.txt' (or <pattern>) to get an expression"
    echo "matrix, saved as <output_file>."
    echo
    echo "The encoding of the input files cannot be known automatically, so the analysis program used"
    echo "to prepare the input files has to be explicitly given as <analysis_program>."
    echo "Possible values are: 'agilent', 'agilent.median', 'agilent.mean', 'arrayvision',"
    echo "'arrayvision.ARM', 'arrayvision.MTM', 'bluefuse', 'genepix', 'genepix.custom',"
    echo "'genepix.median', 'imagene', 'imagene9', 'quantarray', 'scanarrayexpress', 'smd.old', 'smd',"
    echo "'spot', 'spot.close.open'."
    echo
    echo "Options:"
    echo "  -r | --remove-controls            If set, removes control probes from the expression data."
    echo "  -p | --grep-pattern <pattern>     The RegEx pattern to match input files with."
    echo "  -g | --green-only                 If set, the input files are treated as having only the"
    echo "                                    green channel."
}


function _gattaca_assert_is_file {
    # Assert if a certain path is pointing to a file that exists
    if test ! -f "$1"; then
        >&2 echo "Error: '$1' is not a file."
        exit 1
    fi
}


function _gattaca_assert_is_directory {
    # Assert if a certain path is pointing to a directory that exists
    if test ! -d "$1"; then
        >&2 echo "Error: '$1' is not a directory."
        exit 1
    fi
}


function _gattaca_run_init {
    target_path="."

    while test $# -gt 0; do
        case "$1" in
            -h | --help)
                _gattaca_help_init
                exit 0
            ;;
            * )
                break
            ;;
        esac
    done

    if test $# -eq 1; then
        target_path="$1"
    elif test $# -eq 0; then
        >&2 echo "Missing required argument '<file_path>'"
        exit 1
    else
        >&2 echo "Wrong number of arguments: ${#} (expected 1)"
        exit 1
    fi

    target_mountpoint="$(dirname "$target_path")"
    target_name=$(basename -- "$target_path")

    mkdir -p "$target_mountpoint"

    echo "Spooling up docker instance..."

    docker run \
        --rm \
        --mount type=bind,source="$target_mountpoint",target=/GATTACA/target \
        mrhedmad/gattaca:"$version" \
        "unnamed", "INFO" \
        "init" "$target_name"

    echo "Created options file in '$target_path'"
}

function _gattaca_run_run {
    
    while test $# -gt 0; do
        case "$1" in
            -h | --help)
                _gattaca_help_run
                exit 0
            ;;
            * )
                break
            ;;
        esac
    done

    # <output_dir> <input_file> <options_file>
    if test $# -eq 3; then
        target_mountpoint=$(realpath "$1")
        input_path=$(realpath "$2")
        options_path=$(realpath "$3")
    else
        >&2 echo "Wrong number of arguments: ${#} (expected 3)"
        exit 1
    fi

    _gattaca_assert_is_file "$input_path"
    _gattaca_assert_is_file "$options_path"

    mkdir -p "$target_mountpoint"

    input_filename=$(basename -- "$input_path")
    input_mountpoint="$(dirname "$input_path")"
    options_filename=$(basename -- "$options_path")
    options_mountpoint="$(dirname "$options_path")"

    if [ "${input_filename}" = "${options_filename}" ]; then
        >&2 echo "Input and option files cannot have the same name. Sorry!"
        exit 1
    fi

    if [ ! "$input_mountpoint" = "$options_mountpoint" ]; then
        cp "$options_path" "$input_mountpoint"
    fi

    echo "Spooling up docker instance..."

    docker run \
        -it --rm \
        --mount type=bind,source="$target_mountpoint",target=/GATTACA/target \
        --mount type=bind,source="$input_mountpoint",target=/GATTACA/input,readonly \
        mrhedmad/gattaca:"$version" \
        "$log_name" "$log_level" \
        "gattaca" "$input_filename" "$options_filename"
}

function _gattaca_run_prepaffy {
    remove_controls="FALSE"

    while test $# -gt 0; do
        case "$1" in
            -h | --help)
                _gattaca_help_prepaffy
                exit 0
            ;;
            -r | --remove-controls)
                shift
                remove_controls="TRUE"
            ;;
            * )
                break
            ;;
        esac
    done

    # <input_dir> <output_file>

    if test $# -eq 2; then
        input_mountpoint=$(realpath "$1")
        output_path=$(realpath "$2")
    else
        >&2 echo "Wrong number of arguments: ${#} (expected 2)"
        exit 1
    fi

    output_mountpoint=$(dirname "$output_path")
    output_filename=$(basename -- "$output_path")

    mkdir -p "$output_mountpoint"

    _gattaca_assert_is_directory "$input_mountpoint"

    echo "Spooling up docker instance..."
    docker run \
        -it --rm \
        --mount type=bind,source="$output_mountpoint",target=/GATTACA/target \
        --mount type=bind,source="$input_mountpoint",target=/GATTACA/input,readonly \
        mrhedmad/gattaca:"$version" \
        "$log_name" "$log_level" \
        "prepaffy" "$output_filename" "$remove_controls"
}

function _gattaca_run_annotate {
    selections="SYMBOL,GENENAME"

    while test $# -gt 0; do
        case "$1" in
            -h | --help)
                _gattaca_help_annotate
                exit 0
            ;;
            -s | --select)
                shift
                selections="$1"
                shift
            ;;
            * )
                break
            ;;
        esac
    done

    # <input_file> <output_file> <chip_id>

    if test $# -eq 3; then
        input_path=$(realpath "$1")
        target_path="$2"
        chip_id="$3"
    else
        >&2 echo "Wrong number of arguments: ${#} (expected 3)"
        exit 1
    fi

    input_mountpoint="$(dirname "$input_path")"
    target_mountpoint="$(dirname "$target_path")"

    output_filename=$(basename -- "$target_path")
    input_filename=$(basename -- "$input_path")

    _gattaca_assert_is_file "$input_path"
    
    mkdir -p "$target_mountpoint"

    echo "Spooling up docker instance..."
    docker run \
        -it --rm \
        --mount type=bind,source="$target_mountpoint",target=/GATTACA/target \
        --mount type=bind,source="$input_mountpoint",target=/GATTACA/input,readonly \
        mrhedmad/gattaca:"$version" \
        "$log_name" "$log_level" \
        "annotate" "$input_filename" "$output_filename" "$chip_id" "$selections"
}

function _gattaca_run_prepagil {
    grep_pattern="*.txt"
    green_only="FALSE"
    remove_controls="FALSE"
    
     while test $# -gt 0; do
        case "$1" in
            -h | --help)
                _gattaca_help_prepagil
                exit 0
            ;;
            -r | --remove-controls)
                shift
                remove_controls="TRUE"
            ;;
            -p | --grep-pattern)
                shift
                grep_pattern="$1"
                shift
            ;;
            -g | --green-only)
                shift
                green_only="TRUE"
            ;;
            * )
                break
            ;;
        esac
    done
    
    if test $# -eq 3; then
        input_dir=$(realpath "$1")
        target_path=$(realpath "$2")
        analysis_program="$3"
    else
        >&2 echo "Wrong number of arguments: ${#} (expected 3)"
        exit 1
    fi
    
    target_mountpoint="$(dirname "$target_path")"
    output_filename=$(basename -- "$target_path")

    _gattaca_assert_is_directory "$input_dir"
    
    mkdir -p "$target_mountpoint"
    
    echo "Spooling up docker instance..."
    docker run \
        -it --rm \
        --mount type=bind,source="$target_mountpoint",target=/GATTACA/target \
        --mount type=bind,source="$input_dir",target=/GATTACA/input,readonly \
        mrhedmad/gattaca:"$version" \
        "$log_name" "$log_level" \
        "prepagil" "$output_filename" "$analysis_program" "$grep_pattern" "$green_only" "$remove_controls"
}

if [ $# == 0 ]; then
    _gattaca_print_general_help
fi

version="latest"
log_level="INFO"

while test $# -gt 0; do
    case "$1" in
        -h | --help)
            _gattaca_print_general_help
            exit 0
        ;;
        -v | --version)
            shift # Get rid of `-v`
            version="$1"
            ## TODO: Print out warnings for very old docker images that do 
            # not support some commands.
            shift
        ;;
        -l | --log-name)
            shift
            log_name="$1"
            shift
        ;;
        --verbose)
            shift
            log_level="DEBUG"
        ;;
        init)
            shift
            _gattaca_run_init "$@"
            exit 0
        ;;
        run)
            shift
            _gattaca_run_run "$@"
            exit 0
        ;;
        prepaffy)
            shift
            _gattaca_run_prepaffy "$@"
            exit 0
        ;;
        annotate)
            shift
            _gattaca_run_annotate "$@"
            exit 0
        ;;
        prepagil)
            shift
            _gattaca_run_prepagil "$@"
            exit 0
        ;;
        *)
            echo "Invalid parameter '{$1}'."
            _gattaca_print_general_help
            exit 0
    esac
done
